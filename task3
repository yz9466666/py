1.Dict字典
1.1定义
字典是通过hash表的原理实现的，每个元素都是一个键值对，通过元素的键计算出一个唯一的哈希值，这个hash值决定了元素的地址，因此为了保证元素地址不一样，必须保证每个元素的键和对应的hash值是完全不同的，并且键的类型必须是不可修改的，所以键的类型可以使数值，字符串常量或元组，但不能是列表，因为列表是可以被修改的。
所以字典具有下列特性：
元素的查询和插入操作很快，基本上是常数级别
占用内存较大，采用的是空间换时间的方法
1.2创建
字典的初始化
下面的方法都是等价的
d={'a':1, 'b':2, 'c':3}
d=dict({'a':1, 'b':2, 'c':3})
d = dict([('a',1), ('b', 2), ('c', 3)])
d = dict(a=1, b=2, c=3)
d = dict(zip(['a', 'b', 'c'], [1,2,3]))#这个方法也可以用作将两个列表合并成一个字典
1.3字典的方法
参考https://www.cnblogs.com/suntp/p/6478261.html
2.集合
2.1特性
集合（set）是一个无序的不重复元素序列。
2.2创建
可以使用大括号 { } 或者 set() 函数创建集合。
注意：创建一个空集合必须用 set() 而不是 { }，因为 { } 是用来创建一个空字典。
创建格式：
parame = {value01,value02,...}
或者
set(value)
2.3方法
方法	描述
add()	为集合添加元素
clear()	移除集合中的所有元素
copy()	拷贝一个集合
difference()	返回多个集合的差集
difference_update()	移除集合中的元素，该元素在指定的集合也存在。
discard()	删除集合中指定的元素
intersection()	返回集合的交集
intersection_update()	删除集合中的元素，该元素在指定的集合中不存在。
isdisjoint()	判断两个集合是否包含相同的元素，如果没有返回 True，否则返回 False。
issubset()	判断指定集合是否为该方法参数集合的子集。
issuperset()	判断该方法的参数集合是否为指定集合的子集
pop()	随机移除元素
remove()	移除指定元素
symmetric_difference()	返回两个集合中不重复的元素集合。
symmetric_difference_update()	移除当前集合中在另外一个指定集合相同的元素，并将另外一个指定集合中不同的元素插入到当前集合中。
union()	返回两个集合的并集
update()	给集合添加元素
3.判断语句
条件判断语句的是：
if(判断内容):
    执行内容1
elif(判断内容):
    执行内容2
else:
    执行内容3
使用时要注意判断格式，换行后第二行要缩进四个空格，否则会报错。
以上述代码为例，if 后面的括号内，放入的首次判断的内容，若正确，执行 执行内容1 ，执行完成后，跳过剩余判断语句；若错误，则跳过 执行内容1 ，开始执行 elif 括号里的内容，若正确，执行 执行内容2 ，执行完成后，跳过剩余判断语句；若错误，则跳过 执行内容2 ，直接开始执行else里的 执行内容3。示例如下：
设置 a = 20 
由于 a = 20 > 10 ，则执行第一个判断成功后，执行下面的语句print('a大于10')，之后跳过剩余语句。
几点需要注意：
一个条件判断语句中可以有多个 elif 。
一个条件判断语句中最多只能有一个 else ，条件判断语句可以没有else。
条件判断语句判断成功后，执行当前成功判断里的代码，执行完成后，直接跳过剩余条件判断语句。
其中，判断内容 一般是条件判断语句。
4.三目表达式
https://blog.csdn.net/yilovexing/article/details/80571871
