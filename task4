1.函数关键字
python中一共含有32个关键字：'false', 'none', 'true', 'and', 'as', 'assert', 'break', 'class', 'continue', 'def', 'del', 'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import', 'in', 'is', 'lambda', 'nonlocal', 'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'
--关键字-是Python内置的、具有特殊意义的表示符
--使用时关键字后面不需要括号
2.函数的定义
函数是组织好的，可重复使用的，用来实现单一，或相关联功能的代码段。可以自己定义一个函数。
--函数-封装了独立功能，可以直接调用
--函数名(参数)
以下是简单的定义规则：
函数代码块以 def 关键词开头，后接函数标识符名称和圆括号()。
任何传入参数和自变量必须放在圆括号中间。圆括号之间可以用于定义参数。
函数的第一行语句可以选择性地使用文档字符串—用于存放函数说明。
函数内容以冒号起始，并且缩进。
return [表达式] 结束函数，选择性地返回一个值给调用方。不带表达式的return相当于返回 None。
3.函数参数与作用域
2.1 位置参数
参考https://blog.csdn.net/lxlmycsdnfree/article/details/78595838
4.函数返回值
return 则是将 return 后面的部分作为返回值作为函数的输出，可以用变量接走，继续使用该返回值做其它事。
函数需要先定义后调用，函数体中 return 语句的结果就是返回值。如果一个函数没有 reutrn 语句，其实它有一个隐含的 return 语句，返回值是 None，类型也是 'NoneType'。
return 语句的作用：
结束函数调用、返回值


指定返回值与隐含返回值
函数体中 return 语句有指定返回值时返回的就是其值
函数体中没有 return 语句时，函数运行结束会隐含返回一个 None 作为返回值，类型是 NoneType，与 return 、return None 等效，都是返回 None。


return 语句位置与多条 return 语句
python 函数使用 return 语句返回 "返回值"，可以将其赋给其它变量作其它的用处
所有函数都有返回值，如果没有 return 语句，会隐式地调用 return None 作为返回值
一个函数可以存在多条 return 语句，但只有一条可以被执行，如果没有一条 reutrn 语句被执行，同样会隐式调用 return None 作为返回值
如果有必要，可以显式调用 return None 明确返回一个None(空值对象)作为返回值，可以简写为 return，不过 python 中懒惰即美德，所以一般能不写就不写
如果函数执行了 return 语句，函数会立刻返回，结束调用，return 之后的其它语句都不会被执行了。
5.File
https://www.runoob.com/python/file-methods.html
6.Os模块
Python os模块常用函数详解
当前使用平台：

os.name  #返回当前使用平台的代表字符，Windows用'nt'表示，Linux用'posix'表示
当前路径和文件

os.getcwd()  #返回当前工作目录
os.listdir(path)  #返回path目录下所有文件列表
绝对路径

os.path.abspath(path) #返回path的绝对路径
系统操作：

os.system()  #运行shell命令
>>>os.system('cmd')  #Windows下打开终端
>>>os.system('ls')  #Linux下查看当前目录所有文件
查看文件名或目录：

os.path.split(path)  #将path的目录和文件名分开为元组
os.path.join(path1,path2,...)  #将path1，怕path2，...进行组合，若path2为绝对路径，则会将path1删除
os.path.dirname(path)  #返回path中的目录（文件夹部分），结果不包含'\'
os.path.basename(path)  #返回path中的文件名
创建目录：

os.mkdir(path)  #创建path目录（只能创建一级目录，如'F:\XXX\WWW'）,在XXX目录下创建WWW目录
os.makedirs(path)  #创建多级目录（如'F:\XXX\SSS'），在F盘下创建XXX目录，继续在XXX目录下创建SSS目录
删除文件或目录：

os.remove(path)  #删除文件（必须是文件）
os.rmdir(path)  #删除path目录(只能删除一级目录，如'F:\XXX\SSS'),只删除SSS目录
os.removedirs(path)  #删除多级目录（如'F:\XXX\SSS'）,必须为空目录，删除SSS、FFF目录
更改路径：

os.chdir(path)  #将当前工作目录更改为指定路径path
查看文件时间：

os.path.getmtime(path)  #返回文件或目录的最后修改时间，结果为秒数
os.path.getatime(path)  #返回文件或目录的最后访问时间，结果为秒数
os.path.getctime(path)  #返回文件或目录得创建时间，结果为秒数
查看文件大小：

os.path.getsize(path)  #返回文件的大小，若是目录则返回0
查看文件：

os.path.exists(path)  #判断path是否存在，存在返回True,不存在返回False
os.path.isfile(path)  #判断path是否为文件，是返回True,不是返回False
os.path.isdir(path)  #判断path是否目录，是返回True，不是返回False
表现形式参数：

os.sep  #返回当前操作系统特定的路径分隔符
os.linesep  #返回当前平台使用的行终止符
os.extsep  #返回文件名与扩展名的分隔符
 获取文件和目录：

os.walk(path)   #递归返回path下的目录（包括path目录）、子目录、文件名的三元组
获得shell命令返回值：

fp=os.popen(cmd)   #打开命令cmd或从命令cmd打开管道，返回值是连接到管道的文件对象
rlt=fp.read()或 rlt=fp.readlines()  #读取结果
 

7.Datetime模块
7.1 datetime.datetime类
datetime.datetime.now()：返回系统当前时间（2018-09-18 18:39:55.921602）

datetime.datetime.now().date()：返回当前时间的日期（2018-09-18）

datetime.datetime.now().time()：返回当前时间的时分秒（18:40:24.946237）

datetime.datetime.ctime()：将datetime.datetime类型转化成str类型


testtime  = datetime.datetime.ctime(datetime.datetime.now())
print(type(testtime))
print(testtime)

#<class 'str'>
#Tue Sep 18 18:50:23 2018

 时间格式转化成字符串：

datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')：返回时间的字符串（2018-11-09 14:42:36）

字符串转化成时间格式

datetime.datetime.strptime('2018-11-09 14:42:36','%Y-%m-%d %H:%M:%S')：返回datetime.datetime类型的时间（2018-11-09 14:42:36）

 

代表日期格式化的符号

%y 两位数的年份表示（00-99）

%Y 四位数的年份表示（000-9999）

%m 月份（01-12）

%d 月内中的一天（0-31）

%H 24小时制小时数（0-23）

%I 12小时制小时数（01-12）

%M 分钟数（00=59）

%S 秒（00-59）

%a 本地简化星期名称

%A 本地完整星期名称

%b 本地简化的月份名称

%B 本地完整的月份名称

%c 本地相应的日期表示和时间表示

%j 年内的一天（001-366）

%p 本地A.M.或P.M.的等价符

%U 一年中的星期数（00-53）星期天为星期的开始

%w 星期（0-6），星期天为星期的开始

%W 一年中的星期数（00-53）星期一为星期的开始

%x 本地相应的日期表示

%X 本地相应的时间表示

%Z 当前时区的名称

 

7.2datetime.timedelta
datetime.timedelta用来计算两个datetime.datetime或者datetime.date类型之间的时间差。

def __new__(cls, days=0, seconds=0, microseconds=0,
　　　milliseconds=0, minutes=0, hours=0, weeks=0):
从构造函数中来看，参数可选：days、seconds、microseconds、milliseconds、minutes、hours、weeks，且默认是0。

这个函数能很方便的解决时间之间的计算问题，比如说我们想知道300天前的今天是几号，可以这样实现：


>>> now = datetime.datetime.now().date()
>>> now
datetime.date(2018, 11, 9)
>>> delta = datetime.timedelta(days = 300)
>>> now - delta
datetime.date(2018, 1, 13)

datetime.timedelta()也可以多个参数，比如计算300天12小时前的时间。


>>> now = datetime.datetime.now()
>>> now
datetime.datetime(2018, 11, 9, 15, 30, 36, 156323)
>>> delta = datetime.timedelta(days = 300,hours = 12)
>>> now - delta
datetime.datetime(2018, 1, 13, 3, 30, 36, 156323)

计算总天数和秒数。

>>> datetime.timedelta(days=1,hours = 2).days
1
>>> datetime.timedelta(days=1,hours = 2).total_seconds()
93600.0
