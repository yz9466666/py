1.列表
1.1列表的标志符号是[]
例如：
menber=[a,b,c，1，2，3];
1.2基本操作
append()对于列表的操作主要实现的是在特定的列表最后添加一个元素，并且只能一次添加一个元素，并且只能在列表最后；
     m.append("哈哈")
     m=[4,5,6,7,8,9]
     m
     [4, 5, 6, 7, 8, 9]
     m.append("哈哈")
     m
     [4, 5, 6, 7, 8, 9, '哈哈']
m.pop（）它的作用是将列表m的最后一个元素返回，并且在此基础上进行删除掉
del m[n]它的作用是删除掉列表里面的索引号位置为n 的元素，这里需要注意的是del是一种操作语句。
Python列表的拷贝
对于python里面如果想要进行列表的复制，具体的操作语句如下：
1） 深拷贝：
M=[A,b,a,c]
N=M[:]
2） 浅拷贝：
N=M
有人说可以直接将M赋值给N也是一样的，虽然表面看起来两者的实现效果是一样的，但是如果你要继续对N进行操作的时候就会出现问题，因为对于正确的第一种拷贝复制，它的作用是将列表M复制下来给N，如果后面对M进行操作，它对于N是完全没有影响的，而我们如果采用赋值的方式，那么在后面对M操作以后就会影响到N，N的值也会随之改变。
综上所述，第一种python列表的拷贝方法才是真正意义上的深拷贝，而赋值操作只是一种暂时的等量代换，它属于一种浅拷贝。
1.3列表相关方法
参考https://www.cnblogs.com/huangping/p/7730347.html
2.元组
元组的元素不能修改。
元组使用小括号。
元组创建很简单，只需要在括号中添加元素，并使用逗号隔开即可。
![https://github.com/yz9466666/py/blob/master/21.png]
3.string字符串
3.1定义及基本操作(+，*，读取方式)
字符串是以单引号或双引号括起来的任意文本，比如"abc"，‘xy'等等，单引号或双引号本身只是一种表示方式，并不是字符串的一部分。
![https://github.com/yz9466666/py/blob/master/22.png]
3.2字符串相关方法
参考https://www.cnblogs.com/chendai21/p/8137285.html
4.字符串格式化问题
Python的字符串格式化有两种方式:%格式符方式，format方式
![https://github.com/yz9466666/py/blob/master/33.png]
